//<class>
//<classVarDec>
//</classVarDec>
//<classVarDec>
//</classVarDec>
//<classVarDec>
//</classVarDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
//<statements>
//<letStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
pop this 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
pop this 1
//</letStatement>
//<letStatement>
//<expression>
//<term>
push argument 2
//</term>
//</expression>
pop this 2
//</letStatement>
//<letStatement>
//<expression>
//<term>
push argument 3
//</term>
//</expression>
pop this 3
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 2
//</term>
//</expression>
pop this 4
//</letStatement>
//<doStatement>
//<subroutineCall>
push pointer 0
push pointer 0
//<expressionList>
//</expressionList>
call show 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<returnStatement>
//<expression>
//<term>
push pointer 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.dispose 0
push argument 0
pop pointer 0
//<statements>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push pointer 0
//</term>
//</expression>
//</expressionList>
call Memory.deAlloc 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.show 0
push argument 0
pop pointer 0
//<statements>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 1
neg
//</term>
//</expression>
//</expressionList>
call Screen.setColor 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
push pointer 0
push pointer 0
//<expressionList>
//</expressionList>
call draw 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.hide 0
push argument 0
pop pointer 0
//<statements>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
//</expressionList>
call Screen.setColor 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
push pointer 0
push pointer 0
//<expressionList>
//</expressionList>
call draw 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.draw 0
push argument 0
pop pointer 0
//<statements>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push this 0
//</term>
//</expression>
//<expression>
//<term>
push this 1
//</term>
//</expression>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
//<expression>
//<term>
push this 1
//</term>
//<term>
push this 3
//</term>
add
//</expression>
//</expressionList>
call Screen.drawRectangle 4
//</subroutineCall>
pop temp 0
//</doStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.setDirection 0
push argument 0
pop pointer 0
//<statements>
//<letStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
pop this 4
//</letStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.getLeft 0
push argument 0
pop pointer 0
//<statements>
//<returnStatement>
//<expression>
//<term>
push this 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.getRight 0
push argument 0
pop pointer 0
//<statements>
//<returnStatement>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.setWidth 0
push argument 0
pop pointer 0
//<statements>
//<doStatement>
//<subroutineCall>
push pointer 0
push pointer 0
//<expressionList>
//</expressionList>
call hide 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<letStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
pop this 2
//</letStatement>
//<doStatement>
//<subroutineCall>
push pointer 0
push pointer 0
//<expressionList>
//</expressionList>
call show 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Bat.move 0
push argument 0
pop pointer 0
//<statements>
//<ifStatement>
//<expression>
//<term>
push this 4
//</term>
//<term>
push constant 1
//</term>
eq
//</expression>
not
if-goto IFFALSE0
//<statements>
//<letStatement>
//<expression>
//<term>
push this 0
//</term>
//<term>
push constant 4
//</term>
sub
//</expression>
pop this 0
//</letStatement>
//<ifStatement>
//<expression>
//<term>
push this 0
//</term>
//<term>
push constant 0
//</term>
lt
//</expression>
not
if-goto IFFALSE1
//<statements>
//<letStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
pop this 0
//</letStatement>
//</statements>
goto IFTRUE1
label IFFALSE1
label IFTRUE1
//</ifStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
//</expressionList>
call Screen.setColor 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
//</term>
//<term>
push constant 1
//</term>
add
//</expression>
//<expression>
//<term>
push this 1
//</term>
//</expression>
//<expression>
//<term>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
//</term>
//<term>
push constant 4
//</term>
add
//</expression>
//<expression>
//<term>
push this 1
//</term>
//<term>
push this 3
//</term>
add
//</expression>
//</expressionList>
call Screen.drawRectangle 4
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 1
neg
//</term>
//</expression>
//</expressionList>
call Screen.setColor 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push this 0
//</term>
//</expression>
//<expression>
//<term>
push this 1
//</term>
//</expression>
//<expression>
//<term>
push this 0
//</term>
//<term>
push constant 3
//</term>
add
//</expression>
//<expression>
//<term>
push this 1
//</term>
//<term>
push this 3
//</term>
add
//</expression>
//</expressionList>
call Screen.drawRectangle 4
//</subroutineCall>
pop temp 0
//</doStatement>
//</statements>
goto IFTRUE0
label IFFALSE0
//<statements>
//<letStatement>
//<expression>
//<term>
push this 0
//</term>
//<term>
push constant 4
//</term>
add
//</expression>
pop this 0
//</letStatement>
//<ifStatement>
//<expression>
//<term>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
//</term>
//<term>
push constant 511
//</term>
gt
//</expression>
not
if-goto IFFALSE3
//<statements>
//<letStatement>
//<expression>
//<term>
push constant 511
//</term>
//<term>
push this 2
//</term>
sub
//</expression>
pop this 0
//</letStatement>
//</statements>
goto IFTRUE3
label IFFALSE3
label IFTRUE3
//</ifStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
//</expressionList>
call Screen.setColor 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push this 0
//</term>
//<term>
push constant 4
//</term>
sub
//</expression>
//<expression>
//<term>
push this 1
//</term>
//</expression>
//<expression>
//<term>
push this 0
//</term>
//<term>
push constant 1
//</term>
sub
//</expression>
//<expression>
//<term>
push this 1
//</term>
//<term>
push this 3
//</term>
add
//</expression>
//</expressionList>
call Screen.drawRectangle 4
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 1
neg
//</term>
//</expression>
//</expressionList>
call Screen.setColor 1
//</subroutineCall>
pop temp 0
//</doStatement>
//<doStatement>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
//</term>
//<term>
push constant 3
//</term>
sub
//</expression>
//<expression>
//<term>
push this 1
//</term>
//</expression>
//<expression>
//<term>
push this 0
//</term>
//<term>
push this 2
//</term>
add
//</expression>
//<expression>
//<term>
push this 1
//</term>
//<term>
push this 3
//</term>
add
//</expression>
//</expressionList>
call Screen.drawRectangle 4
//</subroutineCall>
pop temp 0
//</doStatement>
//</statements>
label IFTRUE0
//</ifStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//</class>
