//push/pop C_PUSH argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_POP pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push/pop C_PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_POP that 0
@THAT
D=M
@0
D=D+A
@addr
M=D
@SP
M=M-1
A=M
D=M
@addr
A=M
M=D
//push/pop C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_POP that 1
@THAT
D=M
@1
D=D+A
@addr
M=D
@SP
M=M-1
A=M
D=M
@addr
A=M
M=D
//push/pop C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push/pop C_POP argument 0
@ARG
D=M
@0
D=D+A
@addr
M=D
@SP
M=M-1
A=M
D=M
@addr
A=M
M=D
//labelMAIN_LOOP_START
(MAIN_LOOP_START)
//push/pop C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//ifgotoCOMPUTE_ELEMENT
@SP
M=M-1
A=M
D=M
@COMPUTE_ELEMENT
D;JNE
//gotoEND_PROGRAM
@END_PROGRAM
0;JMP
//labelCOMPUTE_ELEMENT
(COMPUTE_ELEMENT)
//push/pop C_PUSH that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_PUSH that 1
@THAT
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D+M
@SP
M=M+1
//push/pop C_POP that 2
@THAT
D=M
@2
D=D+A
@addr
M=D
@SP
M=M-1
A=M
D=M
@addr
A=M
M=D
//push/pop C_PUSH pointer 1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=D+M
@SP
M=M+1
//push/pop C_POP pointer 1
@SP
M=M-1
A=M
D=M
@THAT
M=D
//push/pop C_PUSH argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push/pop C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//push/pop C_POP argument 0
@ARG
D=M
@0
D=D+A
@addr
M=D
@SP
M=M-1
A=M
D=M
@addr
A=M
M=D
//gotoMAIN_LOOP_START
@MAIN_LOOP_START
0;JMP
//labelEND_PROGRAM
(END_PROGRAM)
