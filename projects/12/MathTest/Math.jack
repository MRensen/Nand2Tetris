// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;
	static Arrat twoPower;

    /** Initializes the library. */
    function void init() {
	var int i;
	let i = 0;
	let twoToThe = Array.new(16);

	let twoToThe[0] = 1;
	let twoToThe[1] = 2;
	let twoToThe[2] = 4;
	let twoToThe[3] = 8;
	let twoToThe[4] = 16;
	let twoToThe[5] = 32;
	let twoToThe[6] = 64;
	let twoToThe[7] = 128;
	let twoToThe[8] = 256;
	let twoToThe[9] = 512;
	let twoToThe[10] = 1024;
	let twoToThe[11] = 2048;
	let twoToThe[12] = 4096;
	let twoToThe[13] = 8192;
	let twoToThe[14] = 16384;
	let twoToThe[15] = 16384+16384;
	return;
    }

	/** This is a helper functions for multiply to see if a bit is on or off*/
	function boolean bit(int x, int i) {
		return ((x & twoToThe[i]) > 0);
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x<0){
		return -x;
	}
	return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int sum;
	var int shiftedX;
	var int i;

	let sum = 0;
	let shiftedX = x;
	let i = 0;
	
	if((x=1)|(y=1)){
		if(x=1}{
			return y;
		} else {
			return x;
		}
	}
	while(i < 16){
		if(Math.bit(y,i)){
			let sum = sum + shiftedX;
		}
		let i = i + 1;
		let shiftedX = shiftedX + shiftedX;
	}
	return sum;	
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
	var int q;
	var int result;
	var boolean negy;
	var boolean negx;

	let negx = x<0;
	let negy = y<0;
	let x = Math.abs(x);
	let y = Math.abs(y);
	if((y>x)|(y<0)){
		return 0;
	}
	let q = Math.divide(x, y+y);
	if((x-Math.multiply((q+q),y)) < y)){
		let result = q+q;
	} else {
		let result = (q+q)+1;
	}
	if (negx = negy){
		return result;
	} else {
		return -result;
	}
	
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int y;
	var int j;
	var int cond;
	var int cond2;

	let y = 0;
	let j = 7; // #bits/2 -1
	
	while(~(j<0)){
		let cond = y + twoToThe[j];
		let cond2 = Math.multiply(cond,cond);
		if(~(cond2>x)&~(cond2<0)){
			let y = cond;
		}
		let j = j-1;
	}
	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if(a>b){
		return a;
	} else {
		return b;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if(a>b){
		return b;
	} else {
		return a;
	}
    }

	function int mod(int x, int m) {
		/** This if-statement is a hack for the Screen class.*/
		if(x=0){
			return 0;
		}
		return x - (m * Math.divide(x,m));
	}

	function int changeBit(int value, int i, boolean bool){
		var boolean bitValue;
		
		let bitValue = Math.bit(value, i);
		if(bitValue){
			if(~(bitValue = bool)){
				let value = value - twoToThe[i];
			} 
		} else {
			if(~(bitValue = bool)){
				let value = value + twoToThe[i];
			} 
		}
		return value;
	}
}
