//<class>
//<classVarDec>
//</classVarDec>
//<classVarDec>
//</classVarDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
//<varDec>
//</varDec>
function Math.init 1
//<statements>
//<letStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
pop local 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push constant 16
//</term>
//</expression>
//</expressionList>
call Array.new 1
//</subroutineCall>
//</term>
//</expression>
pop static 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 1
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 2
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 2
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 4
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 3
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 8
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 4
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 16
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 5
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 32
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 6
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 64
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 7
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 128
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 8
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 256
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 9
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 512
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 10
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 1024
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 11
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 2048
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 12
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 4096
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 13
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 8192
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 14
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 16384
//</term>
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 15
//</term>
//</expression>
push static 0
add
//<expression>
//<term>
push constant 16384
//</term>
//<expression>
//<term>
push constant 16384
//</term>
//</expression>
add
//</expression>
pop temp 0
pop pointer 1
push temp 0
pop that 0
//</letStatement>
//<returnStatement>
push constant 0
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Math.bit 0
//<statements>
//<returnStatement>
//<expression>
//<term>
//<expression>
//<term>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
push static 0
add
pop pointer 1
push that 0
//</term>
//</expression>
and
//</expression>
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
gt
//</expression>
//</term>
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Math.abs 0
//<statements>
//<ifStatement>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
lt
//</expression>
not
if-goto IFFALSE0
//<statements>
//<returnStatement>
//<expression>
//<term>
//<term>
push argument 0
//</term>
neg
//</term>
//</expression>
return
//</returnStatement>
//</statements>
goto IFTRUE0
label IFFALSE0
label IFTRUE0
//</ifStatement>
//<returnStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
function Math.multiply 3
//<statements>
//<letStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
pop local 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
pop local 1
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
pop local 2
//</letStatement>
//<ifStatement>
//<expression>
//<term>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
eq
//</expression>
//</term>
//<expression>
//<term>
//<expression>
//<term>
push argument 1
//</term>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
eq
//</expression>
//</term>
//</expression>
or
//</expression>
not
if-goto IFFALSE2
//<statements>
//<ifStatement>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
eq
//</expression>
not
if-goto IFFALSE3
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
return
//</returnStatement>
//</statements>
goto IFTRUE3
label IFFALSE3
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
label IFTRUE3
//</ifStatement>
//</statements>
goto IFTRUE2
label IFFALSE2
label IFTRUE2
//</ifStatement>
//<whileStatement>
label WHILETRUE6
//<expression>
//<term>
push local 2
//</term>
//<expression>
//<term>
push constant 16
//</term>
//</expression>
lt
//</expression>
not
if-goto WHILEFALSE6
//<statements>
//<ifStatement>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
//<expression>
//<term>
push local 2
//</term>
//</expression>
//</expressionList>
call Math.bit 2
//</subroutineCall>
//</term>
//</expression>
not
if-goto IFFALSE7
//<statements>
//<letStatement>
//<expression>
//<term>
push local 0
//</term>
//<expression>
//<term>
push local 1
//</term>
//</expression>
add
//</expression>
pop local 0
//</letStatement>
//</statements>
goto IFTRUE7
label IFFALSE7
label IFTRUE7
//</ifStatement>
//<letStatement>
//<expression>
//<term>
push local 2
//</term>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
add
//</expression>
pop local 2
//</letStatement>
//<letStatement>
//<expression>
//<term>
push local 1
//</term>
//<expression>
//<term>
push local 1
//</term>
//</expression>
add
//</expression>
pop local 1
//</letStatement>
//</statements>
goto WHILETRUE6
label WHILEFALSE6
//</whileStatement>
//<returnStatement>
//<expression>
//<term>
push local 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
function Math.divide 4
//<statements>
//<letStatement>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
lt
//</expression>
pop local 3
//</letStatement>
//<letStatement>
//<expression>
//<term>
push argument 1
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
lt
//</expression>
pop local 2
//</letStatement>
//<letStatement>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
//</expressionList>
call Math.abs 1
//</subroutineCall>
//</term>
//</expression>
pop argument 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
//</expressionList>
call Math.abs 1
//</subroutineCall>
//</term>
//</expression>
pop argument 1
//</letStatement>
//<ifStatement>
//<expression>
//<term>
//<expression>
//<term>
push argument 1
//</term>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
gt
//</expression>
//</term>
//<expression>
//<term>
//<expression>
//<term>
push argument 1
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
lt
//</expression>
//</term>
//</expression>
or
//</expression>
not
if-goto IFFALSE10
//<statements>
//<returnStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
goto IFTRUE10
label IFFALSE10
label IFTRUE10
//</ifStatement>
//<letStatement>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
//<expression>
//<term>
push argument 1
//</term>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
add
//</expression>
//</expressionList>
call Math.divide 2
//</subroutineCall>
//</term>
//</expression>
pop local 0
//</letStatement>
//<ifStatement>
//<expression>
//<term>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
//<expression>
//<term>
push local 0
//</term>
//<expression>
//<term>
push local 0
//</term>
//</expression>
add
//</expression>
//</term>
//</expression>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
//</expressionList>
call Math.multiply 2
//</subroutineCall>
//</term>
//</expression>
sub
//</expression>
//</term>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
lt
//</expression>
not
if-goto IFFALSE12
//<statements>
//<letStatement>
//<expression>
//<term>
push local 0
//</term>
//<expression>
//<term>
push local 0
//</term>
//</expression>
add
//</expression>
pop local 1
//</letStatement>
//</statements>
goto IFTRUE12
label IFFALSE12
//<statements>
//<letStatement>
//<expression>
//<term>
//<expression>
//<term>
push local 0
//</term>
//<expression>
//<term>
push local 0
//</term>
//</expression>
add
//</expression>
//</term>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
add
//</expression>
pop local 1
//</letStatement>
//</statements>
label IFTRUE12
//</ifStatement>
//<ifStatement>
//<expression>
//<term>
push local 3
//</term>
//<expression>
//<term>
push local 2
//</term>
//</expression>
eq
//</expression>
not
if-goto IFFALSE14
//<statements>
//<returnStatement>
//<expression>
//<term>
push local 1
//</term>
//</expression>
return
//</returnStatement>
//</statements>
goto IFTRUE14
label IFFALSE14
//<statements>
//<returnStatement>
//<expression>
//<term>
//<term>
push local 1
//</term>
neg
//</term>
//</expression>
return
//</returnStatement>
//</statements>
label IFTRUE14
//</ifStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
//<varDec>
//</varDec>
function Math.sqrt 4
//<statements>
//<letStatement>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
pop local 0
//</letStatement>
//<letStatement>
//<expression>
//<term>
push constant 7
//</term>
//</expression>
pop local 1
//</letStatement>
//<whileStatement>
label WHILETRUE16
//<expression>
//<term>
//<term>
//<expression>
//<term>
push local 1
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
lt
//</expression>
//</term>
not
//</term>
//</expression>
not
if-goto WHILEFALSE16
//<statements>
//<letStatement>
//<expression>
//<term>
push local 0
//</term>
//<expression>
//<term>
//<expression>
//<term>
push local 1
//</term>
//</expression>
push static 0
add
pop pointer 1
push that 0
//</term>
//</expression>
add
//</expression>
pop local 2
//</letStatement>
//<letStatement>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push local 2
//</term>
//</expression>
//<expression>
//<term>
push local 2
//</term>
//</expression>
//</expressionList>
call Math.multiply 2
//</subroutineCall>
//</term>
//</expression>
pop local 3
//</letStatement>
//<ifStatement>
//<expression>
//<term>
//<term>
//<expression>
//<term>
push local 3
//</term>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
gt
//</expression>
//</term>
not
//</term>
//<expression>
//<term>
//<term>
//<expression>
//<term>
push local 3
//</term>
//<expression>
//<term>
push constant 0
//</term>
//</expression>
lt
//</expression>
//</term>
not
//</term>
//</expression>
and
//</expression>
not
if-goto IFFALSE17
//<statements>
//<letStatement>
//<expression>
//<term>
push local 2
//</term>
//</expression>
pop local 0
//</letStatement>
//</statements>
goto IFTRUE17
label IFFALSE17
label IFTRUE17
//</ifStatement>
//<letStatement>
//<expression>
//<term>
push local 1
//</term>
//<expression>
//<term>
push constant 1
//</term>
//</expression>
sub
//</expression>
pop local 1
//</letStatement>
//</statements>
goto WHILETRUE16
label WHILEFALSE16
//</whileStatement>
//<returnStatement>
//<expression>
//<term>
push local 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Math.max 0
//<statements>
//<ifStatement>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
gt
//</expression>
not
if-goto IFFALSE20
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
goto IFTRUE20
label IFFALSE20
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
return
//</returnStatement>
//</statements>
label IFTRUE20
//</ifStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Math.min 0
//<statements>
//<ifStatement>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
gt
//</expression>
not
if-goto IFFALSE22
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
return
//</returnStatement>
//</statements>
goto IFTRUE22
label IFFALSE22
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
return
//</returnStatement>
//</statements>
label IFTRUE22
//</ifStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//<subroutineDec>
//<parameterList>
//</parameterList>
//<subroutineBody>
function Math.mod 0
//<statements>
//<returnStatement>
//<expression>
//<term>
push argument 0
//</term>
//<expression>
//<term>
//<expression>
//<term>
push argument 1
//</term>
//<expression>
//<term>
//<subroutineCall>
//<expressionList>
//<expression>
//<term>
push argument 0
//</term>
//</expression>
//<expression>
//<term>
push argument 1
//</term>
//</expression>
//</expressionList>
call Math.divide 2
//</subroutineCall>
//</term>
//</expression>
call Math.multiply 2
//</expression>
//</term>
//</expression>
sub
//</expression>
return
//</returnStatement>
//</statements>
//</subroutineBody>
//</subroutineDec>
//</class>
