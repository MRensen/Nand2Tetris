function Ball.new 0
push constant 15
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 10
push argument 3
push constant 6
sub
pop this 11
push argument 4
pop this 12
push argument 5
push constant 6
sub
pop this 13
push constant 0
pop this 14
push pointer 0
call Ball.show 1
pop temp 0
push pointer 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Ball.show 0
push argument 0
pop pointer 0
push constant 1
neg
call Screen.setColor 1
pop temp 0
push pointer 0
call Ball.draw 1
pop temp 0
push constant 0
return
function Ball.hide 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Ball.draw 1
pop temp 0
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
push this 0
push this 1
push this 0
push constant 5
add
push this 1
push constant 5
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Ball.getLeft 0
push argument 0
pop pointer 0
push this 0
return
function Ball.getRight 0
push argument 0
pop pointer 0
push this 0
push constant 5
add
return
function Ball.setDestination 3
push argument 0
pop pointer 0
push argument 1
push this 0
sub
pop this 2
push argument 2
push this 1
sub
pop this 3
push this 2
call Math.abs 1
pop local 0
push this 3
call Math.abs 1
pop local 1
push local 0
push local 1
lt
pop this 7
push this 7
not
if-goto IFFALSE0
push local 0
pop local 2
push local 1
pop local 0
push local 2
pop local 1
push this 1
push argument 2
lt
pop this 8
push this 0
push argument 1
lt
pop this 9
goto IFTRUE0
label IFFALSE0
push this 0
push argument 1
lt
pop this 8
push this 1
push argument 2
lt
pop this 9
label IFTRUE0
push constant 2
push local 1
call Math.multiply 2
push local 0
sub
pop this 4
push constant 2
push local 1
call Math.multiply 2
pop this 5
push constant 2
push local 1
push local 0
sub
call Math.multiply 2
pop this 6
push constant 0
return
function Ball.move 0
push argument 0
pop pointer 0
push pointer 0
call Ball.hide 1
pop temp 0
push this 4
push constant 0
lt
not
if-goto IFFALSE2
push this 4
push this 5
add
pop this 4
goto IFTRUE2
label IFFALSE2
push this 4
push this 6
add
pop this 4
push this 9
not
if-goto IFFALSE3
push this 7
not
if-goto IFFALSE4
push this 0
push constant 4
add
pop this 0
goto IFTRUE4
label IFFALSE4
push this 1
push constant 4
add
pop this 1
label IFTRUE4
goto IFTRUE3
label IFFALSE3
push this 7
not
if-goto IFFALSE6
push this 0
push constant 4
sub
pop this 0
goto IFTRUE6
label IFFALSE6
push this 1
push constant 4
sub
pop this 1
label IFTRUE6
label IFTRUE3
label IFTRUE2
push this 8
not
if-goto IFFALSE10
push this 7
not
if-goto IFFALSE11
push this 1
push constant 4
add
pop this 1
goto IFTRUE11
label IFFALSE11
push this 0
push constant 4
add
pop this 0
label IFTRUE11
goto IFTRUE10
label IFFALSE10
push this 7
not
if-goto IFFALSE13
push this 1
push constant 4
sub
pop this 1
goto IFTRUE13
label IFFALSE13
push this 0
push constant 4
sub
pop this 0
label IFTRUE13
label IFTRUE10
push this 0
push this 10
gt
not
not
if-goto IFFALSE16
push constant 1
pop this 14
push this 10
pop this 0
goto IFTRUE16
label IFFALSE16
label IFTRUE16
push this 0
push this 11
lt
not
not
if-goto IFFALSE18
push constant 2
pop this 14
push this 11
pop this 0
goto IFTRUE18
label IFFALSE18
label IFTRUE18
push this 1
push this 12
gt
not
not
if-goto IFFALSE20
push constant 3
pop this 14
push this 12
pop this 1
goto IFTRUE20
label IFFALSE20
label IFTRUE20
push this 1
push this 13
lt
not
not
if-goto IFFALSE22
push constant 4
pop this 14
push this 13
pop this 1
goto IFTRUE22
label IFFALSE22
label IFTRUE22
push pointer 0
call Ball.show 1
pop temp 0
push this 14
return
function Ball.bounce 5
push argument 0
pop pointer 0
push this 2
push constant 10
call Math.divide 2
pop local 2
push this 3
push constant 10
call Math.divide 2
pop local 3
push argument 1
push constant 0
eq
not
if-goto IFFALSE24
push constant 10
pop local 4
goto IFTRUE24
label IFFALSE24
push this 2
push constant 0
lt
not
push argument 1
push constant 1
eq
and
push this 2
push constant 0
lt
push argument 1
push constant 1
neg
eq
and
or
not
if-goto IFFALSE25
push constant 20
pop local 4
goto IFTRUE25
label IFFALSE25
push constant 5
pop local 4
label IFTRUE25
label IFTRUE24
push this 14
push constant 1
eq
not
if-goto IFFALSE28
push constant 506
pop local 0
push local 3
push constant 50
neg
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
goto IFTRUE28
label IFFALSE28
push this 14
push constant 2
eq
not
if-goto IFFALSE29
push constant 0
pop local 0
push local 3
push constant 50
call Math.multiply 2
push local 2
call Math.divide 2
pop local 1
push this 1
push local 1
push local 4
call Math.multiply 2
add
pop local 1
goto IFTRUE29
label IFFALSE29
push this 14
push constant 3
eq
not
if-goto IFFALSE30
push constant 250
pop local 1
push local 2
push constant 25
neg
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
goto IFTRUE30
label IFFALSE30
push constant 0
pop local 1
push local 2
push constant 25
call Math.multiply 2
push local 3
call Math.divide 2
pop local 0
push this 0
push local 0
push local 4
call Math.multiply 2
add
pop local 0
label IFTRUE30
label IFTRUE29
label IFTRUE28
push pointer 0
push local 0
push local 1
call Ball.setDestination 3
pop temp 0
push constant 0
return
