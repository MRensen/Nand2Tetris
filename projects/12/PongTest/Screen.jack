// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screenArray;
	static int screenInt;
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
	let screenArray = 16384;		
	let screenInt = 16384;	
	let color = true;
	return;	
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	var int i;
	let i = 0;
	while( i < 8192){ //8192 = amount of words (16 bit fragments) in the screen memory map
		let screenArray[i] = 0;
		let i = i + 1;
	}
	return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	let color = b;
	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	var int address;
	var int value;
	var int mod;

	let address = (32*y)+(x/16);
	let value = Memory.peek(screenInt + address);
	let mod = Math.mod(x, 16);
	let value = Math.changeBit(value, mod, color);
	do Memory.poke(screenInt + address, value);
	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int x;
	var int y;
	var int dx;
	var int dy;
	var int a;
	var int b;
	var int diff;
	var int temp;

	

	let x = x1;
	let y = y1;
	let dx = Math.abs(x2 - x1);
	let dy = Math.abs(y2 - y1);
	let a = 0;
	let b = 0;
	let diff = 0;
	
	if(dx = 0){	//vertical line
		if(y>y2){
			let y = y2;
			let y2 = y1;
		}
		while(y<y2){
			do Screen.drawPixel(x,y);
			let y = y+1;
		}
	}
	if(dy = 0){	// horizontal line
		if(x>x2){	
			let x = x2;
			let x2 = x1;
		}
		while(x<x2){
			do Screen.drawPixel(x,y);
			let x = x+1;
		}
	}
	
	while((a<dx | a=dx) & (b<dy | b=dy)){
		if(y1 < y2){
			if(x1<x2){
				do Screen.drawPixel(x+a, y+b);	
			} else {
				do Screen.drawPixel(x-a, y+b);
			}
		} else {
			if(x1<x2){
				do Screen.drawPixel(x+a, y-b);	
			} else {
				do Screen.drawPixel(x-a, y-b);
			}
		}

		if(diff < 0){
			let a = a+1;
			let diff = diff + dy;
		} else {
			let b = b+1; 
			let diff = diff - dx;
		}
	}
	

	return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	while(x1<x2){
		do Screen.drawLine(x1, y1, x1, y2);
		let x1 = x1 + 1;
	}
	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {	
	var int dy, rSquared, dySquared;

	//r cannot be greater than 181, so if it is, set it to 181
	if(r > 181){
		let r = 181;
	}

	let dy = -r;
	let rSquared = r*r;
	while(dy < r){
		let dySquared = dy*dy;
		do Screen.drawLine(x-Math.sqrt((rSquared)-(dySquared)), y+dy, x+Math.sqrt((rSquared)-(dySquared)), y+dy);
		let dy = dy+1;
	}
	return;
    }
}

